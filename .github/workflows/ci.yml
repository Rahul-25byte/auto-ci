# .github/workflows/ci.yml - Auto-CI's own CI pipeline
name: Auto-CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
      
      - name: Lint with flake8
        run: |
          flake8 auto_ci.py --max-line-length=88 --exclude=venv,env
      
      - name: Check formatting with Black
        run: |
          black --check auto_ci.py
      
      - name: Check import sorting with isort
        run: |
          isort --check-only auto_ci.py
      
      - name: Type checking with mypy
        run: |
          mypy auto_ci.py --ignore-missing-imports

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
          pip install -e .
      
      - name: Run tests with pytest
        run: |
          pytest tests/ -v --cov=auto_ci --cov-report=xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  integration-tests:
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      
      - name: Install Auto-CI
        run: |
          pip install -e .
      
      - name: Test CLI commands
        run: |
          # Test help
          auto-ci --help
          
          # Create test repositories
          mkdir -p test-repos/python
          cd test-repos/python
          echo "flask==2.3.2" > requirements.txt
          echo "from flask import Flask" > app.py
          
          # Test scanning
          auto-ci scan . --json > scan-result.json
          cat scan-result.json
          
          # Test pipeline generation
          auto-ci generate --ci github --dry-run > pipeline.yml
          cat pipeline.yml
          
          # Test audit
          auto-ci audit . --json > audit-result.json
          cat audit-result.json
      
      - name: Test examples
        run: |
          python -c "
          from auto_ci import create_sample_repo, AutoCI
          import tempfile
          import os
          
          # Create sample repos and test
          for repo_type in ['python', 'javascript', 'go']:
              with tempfile.TemporaryDirectory() as temp_dir:
                  repo_path = os.path.join(temp_dir, f'sample_{repo_type}')
                  create_sample_repo(repo_path, repo_type)
                  
                  auto_ci = AutoCI()
                  analysis = auto_ci.scan(repo_path)
                  print(f'{repo_type} analysis: {analysis.primary_language}')
                  
                  pipeline, _ = auto_ci.generate_pipeline(repo_path, 'github')
                  print(f'{repo_type} pipeline generated: {len(pipeline)} chars')
          "

  docker-build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: autoci/auto-ci
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Bandit security scan
        uses: tj-actions/bandit@v5.1
        with:
          options: "-r auto_ci.py -f json -o bandit-report.json"
      
      - name: Upload Bandit scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-results
          path: bandit-report.json
      
      - name: Run Safety check
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
      
      - name: Upload Safety scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: safety-results
          path: safety-report.json

  release:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [lint, test, integration-tests, docker-build, security-scan]
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      
      - name: Install build dependencies
        run: |
          pip install build twine
      
      - name: Build package
        run: |
          python -m build
      
      - name: Check distribution
        run: |
          twine check dist/*
      
      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/')
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*
